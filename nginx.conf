# Nginx configuration for production deployment with load balancing
# This is an example configuration for high-availability setup

events {
    worker_connections 1024;
}

http {
    # Upstream configuration for load balancing
    upstream fast_embedding_backend {
        # Health checks
        # Requires nginx-plus or use third-party module
        # For basic nginx, comment out the health_check line
        
        # Round-robin load balancing (default)
        server fast-embedding:8000 max_fails=3 fail_timeout=30s;
        
        # Add more replicas here if using multiple containers
        # server fast-embedding-2:8000 max_fails=3 fail_timeout=30s;
        # server fast-embedding-3:8000 max_fails=3 fail_timeout=30s;
        
        # Use least_conn for better distribution with varying request times
        # least_conn;
        
        # Use ip_hash for sticky sessions (not needed for stateless API)
        # ip_hash;
    }

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=60r/m;
    limit_req_status 429;

    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=addr:10m;

    # Logging
    log_format api_log '$remote_addr - $remote_user [$time_local] '
                       '"$request" $status $body_bytes_sent '
                       '"$http_referer" "$http_user_agent" '
                       'rt=$request_time uct="$upstream_connect_time" '
                       'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log api_log;
    error_log /var/log/nginx/error.log warn;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_types application/json text/plain;

    # Server configuration
    server {
        listen 80;
        server_name _;  # Replace with your domain in production

        # For production, redirect HTTP to HTTPS
        # return 301 https://$server_name$request_uri;

        # Client body size limit
        client_max_body_size 10M;

        # Timeouts
        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;

        # Health check endpoint (bypass rate limiting)
        location /health {
            proxy_pass http://fast_embedding_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # No rate limiting for health checks
            access_log off;
        }

        # Metrics endpoint (optional: restrict access)
        location /metrics {
            # Restrict to internal IPs only
            # allow 10.0.0.0/8;
            # allow 172.16.0.0/12;
            # deny all;

            proxy_pass http://fast_embedding_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # API endpoints with rate limiting
        location / {
            # Apply rate limiting
            limit_req zone=api_limit burst=20 nodelay;
            limit_conn addr 10;

            # Proxy to backend
            proxy_pass http://fast_embedding_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # CORS headers (if not handled by application)
            # add_header 'Access-Control-Allow-Origin' '*' always;
            # add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            # add_header 'Access-Control-Allow-Headers' 'Content-Type' always;

            # Handle OPTIONS requests
            if ($request_method = 'OPTIONS') {
                return 204;
            }
        }
    }

    # HTTPS server configuration (for production)
    # Uncomment and configure SSL certificates
    #
    # server {
    #     listen 443 ssl http2;
    #     server_name yourdomain.com;
    #
    #     # SSL certificates
    #     ssl_certificate /etc/nginx/ssl/cert.pem;
    #     ssl_certificate_key /etc/nginx/ssl/key.pem;
    #
    #     # SSL configuration
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers HIGH:!aNULL:!MD5;
    #     ssl_prefer_server_ciphers on;
    #
    #     # ... rest of the configuration same as HTTP server
    # }
}
